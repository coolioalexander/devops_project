#!/usr/bin/env groovy
// The above line is used to trigger correct syntax highlighting.

pipeline {
    // Lets Jenkins use Docker for us later.
    agent any    

    environment {
        registry = "alexandercoolio/devops_project"
        GOCACHE = "/tmp"
    }

    // If anything fails, the whole Pipeline stops.
    stages {
        stage('Build') {   
            // Use golang.
            agent { docker { image 'golang' } }

            steps {                                           
                // Create our project directory.
                sh 'cd ${GOPATH}/src'
                sh 'mkdir -p ${GOPATH}/src/devops_project'

                // Copy all files in our Jenkins workspace to our project directory.                
                sh 'cp -r ${WORKSPACE}/* ${GOPATH}/src/devops_project'

                // Build the app.
                sh 'go build'               
            }            
        }

        stage('Test') {
            // Use golang.
            agent { docker { image 'golang' } }

            steps {                 
                // Create our project directory.
                sh 'cd ${GOPATH}/src'
                sh 'mkdir -p ${GOPATH}/src/devops_project'

                // Copy all files in our Jenkins workspace to our project directory.
                sh 'cp -r ${WORKSPACE}/* ${GOPATH}/src/devops_project'

                // Remove cached test results.
                sh 'go clean -cache'

                // Run Unit Tests.
                sh 'go test ./... -v -short'            
            }
        }    

        
        stage('Publish Image') {
            environment {
                registryCredential = 'my-docker-credentials-id'
            }
            steps{
                script {

                    def image = docker.build registry + ":$BUILD_NUMBER"  

                    // Use the Credential ID of the Docker Hub Credentials we added to Jenkins.
                    docker.withRegistry('https://registry.hub.docker.com', registryCredential ) {

                        // Push image and tag it with our build number for versioning purposes.
                        image.push()

                        // Push the same image and tag it as the latest version (appears at the top of our version list).
                        image.push('latest')
                    }
                }
            }
        }

    }

    post {
        always {
            // Clean up our workspace.
            deleteDir()
        }
    }
}   
